{"version":3,"file":"static/js/401.3b8e5977.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactItem/ContactItem.js","components/ContactList/ContactList.js","pages/Contacts.js"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from '../../redux/contacts/contactsOperations'\nimport { nanoid } from 'nanoid';\n\nexport default function ContactForm() {\n    const [name, setName] = useState('')\n    const [number, setNumber] = useState('')\n    const dispatch = useDispatch()\n\n    const formSubmitHandler = (e) => {\n        e.preventDefault()\n        const newItem = {\n            name,\n            number: number,\n            id: nanoid()\n        }\n\n        dispatch(addContact(newItem));\n\n        setName('')\n        setNumber('')\n    }\n\n    const handleChange = (e) => {\n        const { name, value } = e.target\n        switch (name) {\n            case 'name':\n                setName(value)\n                break;\n            case 'number':\n                setNumber(value)\n                break\n            default:\n                break;\n        }\n    }\n\n    return (\n        <form onSubmit={formSubmitHandler}>\n            <label htmlFor=\"name\">Name</label>\n            <input\n                onChange={handleChange}\n                value={name}\n                type=\"text\"\n                name=\"name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n            />\n            <label htmlFor=\"number\">Number</label>\n            <input\n                onChange={handleChange}\n                value={number}\n                type=\"tel\"\n                name=\"number\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                required\n            />\n            <button type=\"submit\">Add contact</button>\n        </form>\n    );\n        \n}\n\nContactForm.propTypes = {\n        onSubmit: PropTypes.func,\n    }","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { updateFilter } from 'redux/filterSlice';\n\nconst Filter = ({ filter }) => {\n\n    const dispatch = useDispatch()\n\n    const changeFilter = (e) => {\n        const { value } = e.target;\n        dispatch(updateFilter(value))\n    }\n\n    return (\n        <>\n            <p>Find contacts by name</p>\n            <input type=\"text\" name=\"filter\" value={filter} onChange={changeFilter} />\n        </>\n    )\n}\n\nFilter.propTypes = {\n    filter: PropTypes.string,\n    onChange: PropTypes.func\n}\n\nexport default Filter","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\n\nconst ContactItem = ({ item }) => {\n    \n    const dispatch = useDispatch()\n    const { name, number, id } = item\n    \n    return (\n        <>\n          <p>{name}: {number}</p>\n          <button type=\"button\" onClick={()=> dispatch(deleteContact(id))}>Delete</button>\n        </>\n    )\n}\n\nContactItem.propTypes = {\n    contact: PropTypes.objectOf(PropTypes.string),\n    onDelete: PropTypes.func\n}\n\nexport default ContactItem","import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts, selectFilterValue } from 'redux/selectors';\nimport { fetchContacts } from '../../redux/contacts/contactsOperations'\nimport ContactItem from \"../ContactItem/ContactItem\"\n\nconst ContactList = () => {\n    const { items, isLoading } = useSelector(selectContacts)\n    const filter = useSelector(selectFilterValue)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch])\n\n    const getVisibleContacts = () => {\n        const normFilter = filter.toLowerCase().trim()\n        if (filter.length > 0) {\n            return items.filter(item => item.name.toLowerCase().includes(normFilter))\n        }\n        return items\n    }\n    \n    return (\n        <>\n            {isLoading && <div>Loading ...</div>}\n            {getVisibleContacts().length > 0 && (\n                <ul>\n                    {getVisibleContacts().map((item) =>\n                        <li key={item.id}>\n                            <ContactItem item={item} />\n                        </li>\n                    )}\n                </ul>\n            )}\n        </>\n    )\n}\n\nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)),\n    onDelete: PropTypes.func\n}\n\nexport default ContactList","import ContactForm from \"components/ContactForm/ContactForm\"\nimport Filter from \"components/Filter/Filter\"\nimport ContactList from \"components/ContactList/ContactList\"\n\nconst Contacts = () => {\n    return (\n        <div className=\"container\">\n            <h1>Phonebook</h1>\n            <ContactForm />\n\n            <h2>Contacts</h2>\n            <Filter />\n            <ContactList />\n        </div>\n    )\n}\n\nexport default Contacts"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","ContactForm","useState","name","setName","number","setNumber","dispatch","useDispatch","handleChange","e","target","value","onSubmit","preventDefault","newItem","addContact","htmlFor","onChange","type","pattern","title","required","filter","updateFilter","item","onClick","deleteContact","useSelector","selectContacts","items","isLoading","selectFilterValue","useEffect","fetchContacts","getVisibleContacts","normFilter","toLowerCase","trim","length","includes","map","className"],"sourceRoot":""}