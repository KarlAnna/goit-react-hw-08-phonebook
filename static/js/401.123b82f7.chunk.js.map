{"version":3,"file":"static/js/401.123b82f7.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactItem/ContactItem.js","components/ContactList/ContactList.js","pages/Contacts.js"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from '../../redux/contacts/contactsOperations'\nimport { nanoid } from 'nanoid';\nimport { Box, TextField, Button } from '@mui/material';\n\nexport default function ContactForm() {\n\n    const [name, setName] = useState('')\n    const [number, setNumber] = useState('')\n    const dispatch = useDispatch()\n\n    const formSubmitHandler = (e) => {\n        e.preventDefault()\n        const newItem = {\n            name,\n            number: number,\n            id: nanoid()\n        }\n\n        dispatch(addContact(newItem));\n\n        setName('')\n        setNumber('')\n    }\n\n    const handleChange = (e) => {\n        const { name, value } = e.target\n        switch (name) {\n            case 'name':\n                setName(value)\n                break;\n            case 'number':\n                setNumber(value)\n                break\n            default:\n                break;\n        }\n    }\n\n    return (\n        <Box component='form' onSubmit={formSubmitHandler} sx={{display:'flex', flexWrap:'wrap', gap:'2rem', alignItems:'center', justifyContent:'center', paddingBottom:'1rem'}}>\n            <TextField\n                label=\"Name\"\n                variant=\"filled\" \n                onChange={handleChange}\n                value={name}\n                type=\"text\"\n                name=\"name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n            />\n            <TextField\n                label=\"Number\"\n                variant=\"filled\" \n                onChange={handleChange}\n                value={number}\n                type=\"tel\"\n                name=\"number\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                required\n            />\n            <Button type=\"submit\" variant=\"contained\" sx={{height:'5vh', lineHeight:'1.2'}}>Add contact</Button>\n        </Box>\n    );\n        \n}","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { updateFilter } from 'redux/filterSlice';\nimport { Typography, OutlinedInput } from '@mui/material';\n\nconst Filter = ({ filter }) => {\n\n    const dispatch = useDispatch()\n\n    const changeFilter = (e) => {\n        const { value } = e.target;\n        dispatch(updateFilter(value))\n    }\n\n    return (\n        <>\n            <Typography>Find contacts by name</Typography>\n            <OutlinedInput type=\"text\" name=\"filter\" value={filter} onChange={changeFilter}\n                sx={{height:'1.5rem'}} />\n        </>\n    )\n}\n\nFilter.propTypes = {\n    filter: PropTypes.string,\n    onChange: PropTypes.func\n}\n\nexport default Filter","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\nimport { Typography, Button } from '@mui/material';\n\nconst ContactItem = ({ item }) => {\n    \n    const dispatch = useDispatch()\n    const { name, number, id } = item\n    \n    return (\n        <>\n          <Typography variant=\"body1\">{name}: {number}</Typography>\n          <Button variant=\"outlined\" sx={{height:'4vh'}} type=\"button\" onClick={()=> dispatch(deleteContact(id))}>Delete</Button>\n        </>\n    )\n}\n\nContactItem.propTypes = {\n    contact: PropTypes.objectOf(PropTypes.string),\n    onDelete: PropTypes.func\n}\n\nexport default ContactItem","import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts, selectFilterValue } from 'redux/selectors';\nimport { fetchContacts } from '../../redux/contacts/contactsOperations'\nimport ContactItem from \"../ContactItem/ContactItem\"\nimport { Box, List, ListItem } from '@mui/material';\n\nconst ContactList = () => {\n\n    const { items, isLoading } = useSelector(selectContacts)\n    const filter = useSelector(selectFilterValue)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch])\n\n    const getVisibleContacts = () => {\n        const normFilter = filter.toLowerCase().trim()\n        if (filter.length > 0) {\n            return items.filter(item => item.name.toLowerCase().includes(normFilter))\n        }\n        return items\n    }\n    \n    return (\n        <>\n            {isLoading && <Box>Loading ...</Box>}\n            {getVisibleContacts().length > 0 && (\n                <List>\n                    {getVisibleContacts().map((item) =>\n                        <ListItem key={item.id} sx={{display:'flex', gap:'3vw'}}>\n                            <ContactItem item={item} />\n                        </ListItem>\n                    )}\n                </List>\n            )}\n        </>\n    )\n}\n\nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)),\n    onDelete: PropTypes.func\n}\n\nexport default ContactList","import ContactForm from \"components/ContactForm/ContactForm\"\nimport Filter from \"components/Filter/Filter\"\nimport ContactList from \"components/ContactList/ContactList\"\nimport { Box, Typography } from \"@mui/material\"\n\nconst Contacts = () => {\n    return (\n        <Box sx={{display:'flex', flexDirection:'column', justifyContent:'center'}}>\n            <Typography sx={{padding:'1rem 0'}} variant=\"h5\">Phonebook</Typography>\n            <ContactForm />\n            \n            <Typography sx={{padding:'1rem 0'}} variant=\"h5\">Contacts</Typography>\n            <Filter />\n            <ContactList />\n        </Box>\n    )\n}\n\nexport default Contacts"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","ContactForm","useState","name","setName","number","setNumber","dispatch","useDispatch","handleChange","e","target","value","Box","component","onSubmit","preventDefault","newItem","addContact","sx","display","flexWrap","gap","alignItems","justifyContent","paddingBottom","TextField","label","variant","onChange","type","pattern","title","required","Button","height","lineHeight","filter","Typography","OutlinedInput","updateFilter","item","onClick","deleteContact","useSelector","selectContacts","items","isLoading","selectFilterValue","useEffect","fetchContacts","getVisibleContacts","normFilter","toLowerCase","trim","length","includes","List","map","ListItem","flexDirection","padding"],"sourceRoot":""}